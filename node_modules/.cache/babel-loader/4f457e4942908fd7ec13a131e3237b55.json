{"ast":null,"code":"var _jsxFileName = \"/Users/issoufzabre/workspace/happy-zabre-app/src/components/Cart/Checkout.js\";\n// import { useRef, useState } from 'react';\n// import classes from './Checkout.module.css';\n// const isEmpty = (value) => value.trim() === '';\n// const isFiveChars = (value) => value.trim().length === 5;\n// const Checkout = (props) => {\n//   const [formInputsValidity, setFormInputsValidity] = useState({\n//     name: true,\n//     street: true,\n//     city: true,\n//     postalCode: true,\n//   });\n//   const nameInputRef = useRef();\n//   const streetInputRef = useRef();\n//   const postalCodeInputRef = useRef();\n//   const cityInputRef = useRef();\n//   const confirmHandler = (event) => {\n//     event.preventDefault();\n//     const enteredName = nameInputRef.current.value;\n//     const enteredStreet = streetInputRef.current.value;\n//     const enteredPostalCode = postalCodeInputRef.current.value;\n//     const enteredCity = cityInputRef.current.value;\n//     const enteredNameIsValid = !isEmpty(enteredName);\n//     const enteredStreetIsValid = !isEmpty(enteredStreet);\n//     const enteredCityIsValid = !isEmpty(enteredCity);\n//     const enteredPostalCodeIsValid = isFiveChars(enteredPostalCode);\n//     setFormInputsValidity({\n//       name: enteredNameIsValid,\n//       street: enteredStreetIsValid,\n//       city: enteredCityIsValid,\n//       postalCode: enteredPostalCodeIsValid,\n//     });\n//     const formIsValid =\n//       enteredNameIsValid &&\n//       enteredStreetIsValid &&\n//       enteredCityIsValid &&\n//       enteredPostalCodeIsValid;\n//     if (!formIsValid) {\n//       return;\n//     }\n//     // Submit cart data\n//   };\n//   const nameControlClasses = `${classes.control} ${\n//     formInputsValidity.name ? '' : classes.invalid\n//   }`;\n//   const streetControlClasses = `${classes.control} ${\n//     formInputsValidity.street ? '' : classes.invalid\n//   }`;\n//   const postalCodeControlClasses = `${classes.control} ${\n//     formInputsValidity.postalCode ? '' : classes.invalid\n//   }`;\n//   const cityControlClasses = `${classes.control} ${\n//     formInputsValidity.city ? '' : classes.invalid\n//   }`;\n//   return (\n//     <form className={classes.form} onSubmit={confirmHandler}>\n//       <div className={nameControlClasses}>\n//         <label htmlFor='name'>Your Name</label>\n//         <input type='text' id='name' ref={nameInputRef} />\n//         {!formInputsValidity.name && <p>Please enter a valid name!</p>}\n//       </div>\n//       <div className={streetControlClasses}>\n//         <label htmlFor='street'>Street</label>\n//         <input type='text' id='street' ref={streetInputRef} />\n//         {!formInputsValidity.street && <p>Please enter a valid street!</p>}\n//       </div>\n//       <div className={postalCodeControlClasses}>\n//         <label htmlFor='postal'>Postal Code</label>\n//         <input type='text' id='postal' ref={postalCodeInputRef} />\n//         {!formInputsValidity.postalCode && (\n//           <p>Please enter a valid postal code (5 characters long)!</p>\n//         )}\n//       </div>\n//       <div className={cityControlClasses}>\n//         <label htmlFor='city'>City</label>\n//         <input type='text' id='city' ref={cityInputRef} />\n//         {!formInputsValidity.city && <p>Please enter a valid city!</p>}\n//       </div>\n//       <div className={classes.actions}>\n//         <button type='button' onClick={props.onCancel}>\n//           Cancel\n//         </button>\n//         <button className={classes.submit}>Confirm</button>\n//       </div>\n//     </form>\n//   );\n// };\n// export default Checkout;\n// import { useRef, useState } from 'react';\n// import classes from './Checkout.module.css';\n// const isEmpty = (value) => value.trim() === '';\n// const isFiveChars = (value) => value.trim().length === 5;\n// const Checkout = (props) => {\n//   const [formInputsValidity, setFormInputsValidity] = useState({\n//     name: true,\n//     street: true,\n//     city: true,\n//     postalCode: true,\n//   });\n//   const nameInputRef = useRef();\n//   const streetInputRef = useRef();\n//   const postalCodeInputRef = useRef();\n//   const cityInputRef = useRef();\n//   const confirmHandler = (event) => {\n//     event.preventDefault();\n//     const enteredName = nameInputRef.current.value;\n//     const enteredStreet = streetInputRef.current.value;\n//     const enteredPostalCode = postalCodeInputRef.current.value;\n//     const enteredCity = cityInputRef.current.value;\n//     const enteredNameIsValid = !isEmpty(enteredName);\n//     const enteredStreetIsValid = !isEmpty(enteredStreet);\n//     const enteredCityIsValid = !isEmpty(enteredCity);\n//     const enteredPostalCodeIsValid = isFiveChars(enteredPostalCode);\n//     setFormInputsValidity({\n//       name: enteredNameIsValid,\n//       street: enteredStreetIsValid,\n//       city: enteredCityIsValid,\n//       postalCode: enteredPostalCodeIsValid,\n//     });\n//     const formIsValid =\n//       enteredNameIsValid &&\n//       enteredStreetIsValid &&\n//       enteredCityIsValid &&\n//       enteredPostalCodeIsValid;\n//     if (!formIsValid) {\n//       return;\n//     }\n//     props.onConfirm({\n//       name: enteredName,\n//       street: enteredStreet,\n//       city: enteredCity,\n//       postalCode: enteredPostalCode,\n//     });\n//   };\n//   const nameControlClasses = `${classes.control} ${\n//     formInputsValidity.name ? '' : classes.invalid\n//   }`;\n//   const streetControlClasses = `${classes.control} ${\n//     formInputsValidity.street ? '' : classes.invalid\n//   }`;\n//   const postalCodeControlClasses = `${classes.control} ${\n//     formInputsValidity.postalCode ? '' : classes.invalid\n//   }`;\n//   const cityControlClasses = `${classes.control} ${\n//     formInputsValidity.city ? '' : classes.invalid\n//   }`;\n//   return (\n//     <form className={classes.form} onSubmit={confirmHandler}>\n//       <div className={nameControlClasses}>\n//         <label htmlFor='name'>Your Name</label>\n//         <input type='text' id='name' ref={nameInputRef} />\n//         {!formInputsValidity.name && <p>Please enter a valid name!</p>}\n//       </div>\n//       <div className={streetControlClasses}>\n//         <label htmlFor='street'>Street</label>\n//         <input type='text' id='street' ref={streetInputRef} />\n//         {!formInputsValidity.street && <p>Please enter a valid street!</p>}\n//       </div>\n//       <div className={postalCodeControlClasses}>\n//         <label htmlFor='postal'>Postal Code</label>\n//         <input type='text' id='postal' ref={postalCodeInputRef} />\n//         {!formInputsValidity.postalCode && (\n//           <p>Please enter a valid postal code (5 characters long)!</p>\n//         )}\n//       </div>\n//       <div className={cityControlClasses}>\n//         <label htmlFor='city'>City</label>\n//         <input type='text' id='city' ref={cityInputRef} />\n//         {!formInputsValidity.city && <p>Please enter a valid city!</p>}\n//       </div>\n//       <div className={classes.actions}>\n//         <button type='button' onClick={props.onCancel}>\n//           Cancel\n//         </button>\n//         <button className={classes.submit}>Confirm</button>\n//       </div>\n//     </form>\n//   );\n// };\n// export default Checkout;\nimport classes from './Checkout.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Checkout = props => {\n  const confirmHandler = event => {\n    event.preventDefault();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: classes.form,\n    onSubmit: confirmHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.control,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.control,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"street\",\n        children: \"Street\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"street\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.control,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"postal\",\n        children: \"Postal Code\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"postal\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.control,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"city\",\n        children: \"City\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"city\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.actions,\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: props.onCancel,\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: classes.submit,\n        children: \"Confirm\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 219,\n    columnNumber: 5\n  }, this);\n};\n\n_c = Checkout;\nexport default Checkout;\n\nvar _c;\n\n$RefreshReg$(_c, \"Checkout\");","map":{"version":3,"sources":["/Users/issoufzabre/workspace/happy-zabre-app/src/components/Cart/Checkout.js"],"names":["classes","Checkout","props","confirmHandler","event","preventDefault","form","control","actions","onCancel","submit"],"mappingsoB,uBAApB;;;AAEA,MAAMC,QAAQ,GAAIC,KAAD,IAAW;AAC1B,QAAMC,cAAc,GAAIC,KAAD,IAAW;AAChCA,IAAAA,KAAK,CAACC,cAAN;AACD,GAFD;;AAIA,sBACE;AAAM,IAAA,SAAS,EAAEL,OAAO,CAACM,IAAzB;AAA+B,IAAA,QAAQ,EAAEH,cAAzC;AAAA,4BACE;AAAK,MAAA,SAAS,EAAEH,OAAO,CAACO,OAAxB;AAAA,8BACE;AAAO,QAAA,OAAO,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,EAAE,EAAC;AAAtB;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAKE;AAAK,MAAA,SAAS,EAAEP,OAAO,CAACO,OAAxB;AAAA,8BACE;AAAO,QAAA,OAAO,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,EAAE,EAAC;AAAtB;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YALF,eASE;AAAK,MAAA,SAAS,EAAEP,OAAO,CAACO,OAAxB;AAAA,8BACE;AAAO,QAAA,OAAO,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,EAAE,EAAC;AAAtB;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YATF,eAaE;AAAK,MAAA,SAAS,EAAEP,OAAO,CAACO,OAAxB;AAAA,8BACE;AAAO,QAAA,OAAO,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,EAAE,EAAC;AAAtB;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YAbF,eAiBE;AAAK,MAAA,SAAS,EAAEP,OAAO,CAACQ,OAAxB;AAAA,8BACE;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAsB,QAAA,OAAO,EAAEN,KAAK,CAACO,QAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAIE;AAAQ,QAAA,SAAS,EAAET,OAAO,CAACU,MAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJF;AAAA;AAAA;AAAA;AAAA;AAAA,YAjBF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA0BD,CA/BD;;KAAMT,Q;AAiCN,eAAeA,QAAf","sourcesContent":["// import { useRef, useState } from 'react';\n\n// import classes from './Checkout.module.css';\n\n// const isEmpty = (value) => value.trim() === '';\n// const isFiveChars = (value) => value.trim().length === 5;\n\n// const Checkout = (props) => {\n//   const [formInputsValidity, setFormInputsValidity] = useState({\n//     name: true,\n//     street: true,\n//     city: true,\n//     postalCode: true,\n//   });\n\n//   const nameInputRef = useRef();\n//   const streetInputRef = useRef();\n//   const postalCodeInputRef = useRef();\n//   const cityInputRef = useRef();\n\n//   const confirmHandler = (event) => {\n//     event.preventDefault();\n\n//     const enteredName = nameInputRef.current.value;\n//     const enteredStreet = streetInputRef.current.value;\n//     const enteredPostalCode = postalCodeInputRef.current.value;\n//     const enteredCity = cityInputRef.current.value;\n\n//     const enteredNameIsValid = !isEmpty(enteredName);\n//     const enteredStreetIsValid = !isEmpty(enteredStreet);\n//     const enteredCityIsValid = !isEmpty(enteredCity);\n//     const enteredPostalCodeIsValid = isFiveChars(enteredPostalCode);\n\n//     setFormInputsValidity({\n//       name: enteredNameIsValid,\n//       street: enteredStreetIsValid,\n//       city: enteredCityIsValid,\n//       postalCode: enteredPostalCodeIsValid,\n//     });\n\n//     const formIsValid =\n//       enteredNameIsValid &&\n//       enteredStreetIsValid &&\n//       enteredCityIsValid &&\n//       enteredPostalCodeIsValid;\n\n//     if (!formIsValid) {\n//       return;\n//     }\n\n//     // Submit cart data\n//   };\n\n//   const nameControlClasses = `${classes.control} ${\n//     formInputsValidity.name ? '' : classes.invalid\n//   }`;\n//   const streetControlClasses = `${classes.control} ${\n//     formInputsValidity.street ? '' : classes.invalid\n//   }`;\n//   const postalCodeControlClasses = `${classes.control} ${\n//     formInputsValidity.postalCode ? '' : classes.invalid\n//   }`;\n//   const cityControlClasses = `${classes.control} ${\n//     formInputsValidity.city ? '' : classes.invalid\n//   }`;\n\n//   return (\n//     <form className={classes.form} onSubmit={confirmHandler}>\n//       <div className={nameControlClasses}>\n//         <label htmlFor='name'>Your Name</label>\n//         <input type='text' id='name' ref={nameInputRef} />\n//         {!formInputsValidity.name && <p>Please enter a valid name!</p>}\n//       </div>\n//       <div className={streetControlClasses}>\n//         <label htmlFor='street'>Street</label>\n//         <input type='text' id='street' ref={streetInputRef} />\n//         {!formInputsValidity.street && <p>Please enter a valid street!</p>}\n//       </div>\n//       <div className={postalCodeControlClasses}>\n//         <label htmlFor='postal'>Postal Code</label>\n//         <input type='text' id='postal' ref={postalCodeInputRef} />\n//         {!formInputsValidity.postalCode && (\n//           <p>Please enter a valid postal code (5 characters long)!</p>\n//         )}\n//       </div>\n//       <div className={cityControlClasses}>\n//         <label htmlFor='city'>City</label>\n//         <input type='text' id='city' ref={cityInputRef} />\n//         {!formInputsValidity.city && <p>Please enter a valid city!</p>}\n//       </div>\n//       <div className={classes.actions}>\n//         <button type='button' onClick={props.onCancel}>\n//           Cancel\n//         </button>\n//         <button className={classes.submit}>Confirm</button>\n//       </div>\n//     </form>\n//   );\n// };\n\n// export default Checkout;\n\n// import { useRef, useState } from 'react';\n\n// import classes from './Checkout.module.css';\n\n// const isEmpty = (value) => value.trim() === '';\n// const isFiveChars = (value) => value.trim().length === 5;\n\n// const Checkout = (props) => {\n//   const [formInputsValidity, setFormInputsValidity] = useState({\n//     name: true,\n//     street: true,\n//     city: true,\n//     postalCode: true,\n//   });\n\n//   const nameInputRef = useRef();\n//   const streetInputRef = useRef();\n//   const postalCodeInputRef = useRef();\n//   const cityInputRef = useRef();\n\n//   const confirmHandler = (event) => {\n//     event.preventDefault();\n\n//     const enteredName = nameInputRef.current.value;\n//     const enteredStreet = streetInputRef.current.value;\n//     const enteredPostalCode = postalCodeInputRef.current.value;\n//     const enteredCity = cityInputRef.current.value;\n\n//     const enteredNameIsValid = !isEmpty(enteredName);\n//     const enteredStreetIsValid = !isEmpty(enteredStreet);\n//     const enteredCityIsValid = !isEmpty(enteredCity);\n//     const enteredPostalCodeIsValid = isFiveChars(enteredPostalCode);\n\n//     setFormInputsValidity({\n//       name: enteredNameIsValid,\n//       street: enteredStreetIsValid,\n//       city: enteredCityIsValid,\n//       postalCode: enteredPostalCodeIsValid,\n//     });\n\n//     const formIsValid =\n//       enteredNameIsValid &&\n//       enteredStreetIsValid &&\n//       enteredCityIsValid &&\n//       enteredPostalCodeIsValid;\n\n//     if (!formIsValid) {\n//       return;\n//     }\n\n//     props.onConfirm({\n//       name: enteredName,\n//       street: enteredStreet,\n//       city: enteredCity,\n//       postalCode: enteredPostalCode,\n//     });\n//   };\n\n//   const nameControlClasses = `${classes.control} ${\n//     formInputsValidity.name ? '' : classes.invalid\n//   }`;\n//   const streetControlClasses = `${classes.control} ${\n//     formInputsValidity.street ? '' : classes.invalid\n//   }`;\n//   const postalCodeControlClasses = `${classes.control} ${\n//     formInputsValidity.postalCode ? '' : classes.invalid\n//   }`;\n//   const cityControlClasses = `${classes.control} ${\n//     formInputsValidity.city ? '' : classes.invalid\n//   }`;\n\n//   return (\n//     <form className={classes.form} onSubmit={confirmHandler}>\n//       <div className={nameControlClasses}>\n//         <label htmlFor='name'>Your Name</label>\n//         <input type='text' id='name' ref={nameInputRef} />\n//         {!formInputsValidity.name && <p>Please enter a valid name!</p>}\n//       </div>\n//       <div className={streetControlClasses}>\n//         <label htmlFor='street'>Street</label>\n//         <input type='text' id='street' ref={streetInputRef} />\n//         {!formInputsValidity.street && <p>Please enter a valid street!</p>}\n//       </div>\n//       <div className={postalCodeControlClasses}>\n//         <label htmlFor='postal'>Postal Code</label>\n//         <input type='text' id='postal' ref={postalCodeInputRef} />\n//         {!formInputsValidity.postalCode && (\n//           <p>Please enter a valid postal code (5 characters long)!</p>\n//         )}\n//       </div>\n//       <div className={cityControlClasses}>\n//         <label htmlFor='city'>City</label>\n//         <input type='text' id='city' ref={cityInputRef} />\n//         {!formInputsValidity.city && <p>Please enter a valid city!</p>}\n//       </div>\n//       <div className={classes.actions}>\n//         <button type='button' onClick={props.onCancel}>\n//           Cancel\n//         </button>\n//         <button className={classes.submit}>Confirm</button>\n//       </div>\n//     </form>\n//   );\n// };\n\n// export default Checkout;\n\n\nimport classes from './Checkout.module.css';\n\nconst Checkout = (props) => {\n  const confirmHandler = (event) => {\n    event.preventDefault();\n  };\n\n  return (\n    <form className={classes.form} onSubmit={confirmHandler}>\n      <div className={classes.control}>\n        <label htmlFor='name'>Your Name</label>\n        <input type='text' id='name' />\n      </div>\n      <div className={classes.control}>\n        <label htmlFor='street'>Street</label>\n        <input type='text' id='street' />\n      </div>\n      <div className={classes.control}>\n        <label htmlFor='postal'>Postal Code</label>\n        <input type='text' id='postal' />\n      </div>\n      <div className={classes.control}>\n        <label htmlFor='city'>City</label>\n        <input type='text' id='city' />\n      </div>\n      <div className={classes.actions}>\n        <button type='button' onClick={props.onCancel}>\n          Cancel\n        </button>\n        <button className={classes.submit}>Confirm</button>\n      </div>\n    </form>\n  );\n};\n\nexport default Checkout;\n"]},"metadata":{},"sourceType":"module"}